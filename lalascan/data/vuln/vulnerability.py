#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Vulnerability types.
"""

__author__ = 'BlackYe.'

__all__ = [
    "Vulnerability",
    "WebVulnerability",
]

from .. import Data
from ..resource import Resource
from ..resource.url import BaseURL, FolderURL, URL
from lalascan.utils.text_utils import to_utf8
from ...api.exception import LalascanSystemException
from ...data.enum import RISK_LEVEL

from conf import CACHEDIR, LEAK_JSON_FILE, join_path_func

from collections import defaultdict
from inspect import getmro
from textwrap import dedent
from warnings import warn
import json


#------------------------------------------------------------------------------
# Base class for all vulnerabilities.

class Vulnerability(Data):
    """
    Vulnerability Base Class
    """

    max_vulnerabilities = 0

    # Vulnerability levels.
    VULN_LEVELS = ("informational", "low", "middle", "high", "critical")

    # Default vuln properties.
    # Note: plugin_id and custom_id must NOT be defined here.
    DEFAULTS = {
        "level":          "low",
        "impact":           0,
        "severity":         0,
        "risk":             0,
        "title":            None,  # special value, do not change!
        "description":      None,  # special value, do not change!
        "solution":         None,  # special value, do not change!
        "references":       (),
    }

    def __init__(self, target, **kwargs):
        pass


#------------------------------------------------------------------------------
class WebVulnerability(Vulnerability):
    """
    Base class for web vulnerabilities
    """

    # Vulnerability levels.
    VULN_LEVELS = ("informational", "low", "middle", "high")

    # Default vuln properties.
    # Note: plugin_id and custom_id must NOT be defined here.
    DEFAULTS = {
        "level":            "low",
        "impact":           0,
        "severity":         0,
        "risk":             0,
        "title":            None,  # special value, do not change!
        "description":      None,  # special value, do not change!
        "solution":         None,  # special value, do not change!
        "references":       (),
    }


    #--------------------------------------------------------------------------
    def __init__(self, target, **kwargs):

        # Sanitize the "target" argument.
        target = self._sanitize_url(self, target)

        self._leak_info = self._load_leakinfo()

        # Save the raw URL.
        self.__url = target.url

        # Save the Method
        self.__vul_method = kwargs.get('method')

        #vul params point key
        self.__vulparam_point = kwargs.get('vulparam_point')

        #test case payload
        self.__payload = kwargs.get('payload')

        #vul type
        self.__vul_type = kwargs.get('injection_type')

        #response info
        self.__vul_response = kwargs.get('vul_response')

        # Parent constructor.
        super(WebVulnerability, self).__init__(target, **kwargs)


    #--------------------------------------------------------------------------
    @staticmethod
    def _sanitize_url(self, url, stacklevel = 2):
        if (
            not isinstance(url, URL) and
            not isinstance(url, FolderURL) and
            not isinstance(url, BaseURL)
        ):
            if isinstance(url, basestring):
                msg = "You should pass an URL object" \
                      " to %s instead of a string!"
                msg %= self.__class__.__name__
                url = URL(str(url))
            elif hasattr(url, "url"):
                try:
                    t = url.__class__.__name__
                except Exception:
                    t = str(type(url))
                msg = "You should pass an URL object to %s instead of %s!"
                msg %= (self.__class__.__name__, t)
                url = url.url
                if isinstance(url, basestring):
                    url = URL(str(url))
                elif not isinstance(url, URL):
                    raise TypeError("Expected URL, got %r instead" % t)
            warn(msg, RuntimeWarning, stacklevel=stacklevel+1)
        return url

    def _load_leakinfo(self):
        #TODO Get Content from leak Json
        with open(join_path_func(CACHEDIR, LEAK_JSON_FILE)) as f:
            _json_content = f.read()
            try:
                leak_json = json.loads(_json_content)
                return leak_json
            except Exception,e:
                raise LalascanSystemException(e)

    #--------------------------------------------------------------------------
    def __str__(self):
        return self.url


    #--------------------------------------------------------------------------
    '''
    def __repr__(self):
        return "<%s url=%r plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.url,
            self.level,
            self.description,
        )
    '''

    #--------------------------------------------------------------------------
    @property
    def url(self):
        """
        :return: Raw URL where the vuln was found.
        :rtype: str
        """
        return self.__url


    #--------------------------------------------------------------------------
    def __get_default_text(self, propname):
        text = self.DEFAULTS.get(propname, None)
        return text

    @property
    def injection_type(self):
        if self._leak_info.has_key('%s' % self.__vul_type):
            leak_info = self._leak_info['%s' % self.__vul_type]
            if leak_info is not None:
                self.__risk_level = int(leak_info['risk_level'])
                if self.__risk_level == 4:
                    self.__risk_level_desc = RISK_LEVEL.HIGH
                elif self.__risk_level == 3:
                    self.__risk_level_desc = RISK_LEVEL.MIDDLE
                elif self.__risk_level == 2:
                    self.__risk_level_desc = RISK_LEVEL.LOW
                elif self.__risk_level == 1:
                    self.__risk_level_desc = RISK_LEVEL.INFO

                self.__sli_id = int(leak_info['id'])

                return leak_info['leak_name']

    #maybe UnicodeEncodeError
    def get_injection_type_desc(self):
        if self._leak_info.has_key('%s' % self.__vul_type):
            leak_info = self._leak_info['%s' % self.__vul_type]
            if leak_info is not None:
                return leak_info['leak_name_cn']

    @property
    def vul_method(self):
        return self.__vul_method

    @property
    def vulparam_point(self):
        return self.__vulparam_point

    @property
    def payload(self):
        return self.__payload

    @property
    def vul_response(self):
        return self.__vul_response

    @property
    def vul_risk(self):
        return self.__risk_level

    @property
    def vul_risk_desc(self):
        return self.__risk_level_desc

    @property
    def vul_sli_id(self):
        return self.__sli_id